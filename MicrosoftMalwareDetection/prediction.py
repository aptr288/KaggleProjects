import pandas as pd
from sklearn.model_selection import train_test_split
import lightgbm as lgb
from numpy import loadtxt
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score
import numpy as np
import time
start_time = time.time()
dtypes = {
    'MachineIdentifier': 'category',
    'ProductName': 'category',
    'EngineVersion': 'category',
    'AppVersion': 'category',
    'AvSigVersion': 'category',
    'IsBeta': 'int8',
    'RtpStateBitfield': 'float16',
    'IsSxsPassiveMode': 'int8',
    'DefaultBrowsersIdentifier': 'float16',
    'AVProductStatesIdentifier': 'float32',
    'AVProductsInstalled': 'float16',
    'AVProductsEnabled': 'float16',
    'HasTpm': 'int8',
    'CountryIdentifier': 'int16',
    'CityIdentifier': 'float32',
    'OrganizationIdentifier': 'float16',
    'GeoNameIdentifier': 'float16',
    'LocaleEnglishNameIdentifier': 'int8',
    'Platform': 'category',
    'Processor': 'category',
    'OsVer': 'category',
    'OsBuild': 'int16',
    'OsSuite': 'int16',
    'OsPlatformSubRelease': 'category',
    'OsBuildLab': 'category',
    'SkuEdition': 'category',
    'IsProtected': 'float16',
    'AutoSampleOptIn': 'int8',
    'PuaMode': 'category',
    'SMode': 'float16',
    'IeVerIdentifier': 'float16',
    'SmartScreen': 'category',
    'Firewall': 'float16',
    'UacLuaenable': 'float32',
    'Census_MDC2FormFactor': 'category',
    'Census_DeviceFamily': 'category',
    'Census_OEMNameIdentifier': 'float16',
    'Census_OEMModelIdentifier': 'float32',
    'Census_ProcessorCoreCount': 'float16',
    'Census_ProcessorManufacturerIdentifier': 'float16',
    'Census_ProcessorModelIdentifier': 'float16',
    'Census_ProcessorClass': 'category',
    'Census_PrimaryDiskTotalCapacity': 'float32',
    'Census_PrimaryDiskTypeName': 'category',
    'Census_SystemVolumeTotalCapacity': 'float32',
    'Census_HasOpticalDiskDrive': 'int8',
    'Census_TotalPhysicalRAM': 'float32',
    'Census_ChassisTypeName': 'category',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches': 'float16',
    'Census_InternalPrimaryDisplayResolutionHorizontal': 'float16',
    'Census_InternalPrimaryDisplayResolutionVertical': 'float16',
    'Census_PowerPlatformRoleName': 'category',
    'Census_InternalBatteryType': 'category',
    'Census_InternalBatteryNumberOfCharges': 'float32',
    'Census_OSVersion': 'category',
    'Census_OSArchitecture': 'category',
    'Census_OSBranch': 'category',
    'Census_OSBuildNumber': 'int16',
    'Census_OSBuildRevision': 'int32',
    'Census_OSEdition': 'category',
    'Census_OSSkuName': 'category',
    'Census_OSInstallTypeName': 'category',
    'Census_OSInstallLanguageIdentifier': 'float16',
    'Census_OSUILocaleIdentifier': 'int16',
    'Census_OSWUAutoUpdateOptionsName': 'category',
    'Census_IsPortableOperatingSystem': 'int8',
    'Census_GenuineStateName': 'category',
    'Census_ActivationChannel': 'category',
    'Census_IsFlightingInternal': 'float16',
    'Census_IsFlightsDisabled': 'float16',
    'Census_FlightRing': 'category',
    'Census_ThresholdOptIn': 'float16',
    'Census_FirmwareManufacturerIdentifier': 'float16',
    'Census_FirmwareVersionIdentifier': 'float32',
    'Census_IsSecureBootEnabled': 'int8',
    'Census_IsWIMBootEnabled': 'float16',
    'Census_IsVirtualDevice': 'float16',
    'Census_IsTouchEnabled': 'int8',
    'Census_IsPenCapable': 'int8',
    'Census_IsAlwaysOnAlwaysConnectedCapable': 'float16',
    'Wdft_IsGamer': 'float16',
    'Wdft_RegionIdentifier': 'float16',
    'HasDetections': 'int8'
}
testdf = pd.read_csv('C:/pyfiles/MicrosoftMalwareDetection/testWithLessFeatures.csv')
print(testdf.head())
# print(testdf.isnull().values.any())
# print(testdf.applymap(np.isreal).all(1).any())
# print(testdf[~testdf.applymap(np.isreal).all(1)])
df = pd.read_csv('C:/pyfiles/MicrosoftMalwareDetection/trainWithLessFeatures.csv')
print(df.head())

# print(df.isnull().values.any())
# df = df.dropna()


columns = df.columns
X = df[columns[:-1]]
y = df[columns[-1]]
print(y.unique())

#y = y.astype(int)
print(y.head())
#print(type(y))


# model = XGBClassifier()
#
seed = 7
test_size = 0.10
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=seed)
# model.fit(X_train, y_train)
# y_pred = model.predict(X_test)
#
# # model.fit(X, y)
# # y_pred = model.predict(testdf)
#
# ypred = [round(value) for value in y_pred]
# #y_test = [round(value) for value in y_test]
#

#

lgb_model = lgb.LGBMClassifier(max_depth=-1,
                                   n_estimators=30000,
                                   learning_rate=0.05,
                                   num_leaves=2**12-1,
                                   colsample_bytree=0.28,
                                   objective='binary',
                                   n_jobs=-1)

# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=False)

lgb_model.fit(X_train, y_train, eval_metric='auc',
                  eval_set=[(X_test, y_test)],
                  verbose=100, early_stopping_rounds=100)

#
# print('Starting predicting...')
#
# ypred = lgb_model.predict(X_test)


# lgb_model.fit(X, y, eval_metric='auc',
#                   verbose=100)


print('Starting predicting...')

ypred = lgb_model.predict(testdf)

for i in range(len(ypred)):
    if ypred[i]>=.5:       # setting threshold to .5
       ypred[i]=1
    else:
       ypred[i]=0

print(len(ypred))

# # prediction = [pd.np.argmax(line) for line in ypred]
# # print(len(ypred))
#
# accuracy = accuracy_score(y_test, ypred)
# print("Accuracy: %.2f%%" % (accuracy * 100.0))
ypredic = pd.DataFrame(ypred,columns=['HasDetections'])
ypredic.to_csv('predictions.csv')
print("--- %s seconds ---" % (time.time() - start_time))
submission = pd.read_csv('noNaN.csv')
#print(submission['MachineIdentifier'].count())
submission['HasDetections'] = ypred
submission.to_csv('C:/pyfiles/MicrosoftMalwareDetection/files/lgb_submission.csv', index=False)
#
# print("--- %s seconds ---" % (time.time() - start_time))