#This file helps in feature selection with selecting only features which have less than 2% missing values
#so that we dont need to depend more on newly imputed values

import csv
import time
import numpy
import pandas as pd
from sklearn.preprocessing import LabelEncoder

start_time = time.time()

dtypes = {
    'MachineIdentifier': 'category',
    'ProductName': 'category',
    'EngineVersion': 'category',
    'AppVersion': 'category',
    'AvSigVersion': 'category',
    'IsBeta': 'int8',
    'RtpStateBitfield': 'float16',
    'IsSxsPassiveMode': 'int8',
    'DefaultBrowsersIdentifier': 'float16',
    'AVProductStatesIdentifier': 'float32',
    'AVProductsInstalled': 'float16',
    'AVProductsEnabled': 'float16',
    'HasTpm': 'int8',
    'CountryIdentifier': 'int16',
    'CityIdentifier': 'float32',
    'OrganizationIdentifier': 'float16',
    'GeoNameIdentifier': 'float16',
    'LocaleEnglishNameIdentifier': 'int8',
    'Platform': 'category',
    'Processor': 'category',
    'OsVer': 'category',
    'OsBuild': 'int16',
    'OsSuite': 'int16',
    'OsPlatformSubRelease': 'category',
    'OsBuildLab': 'category',
    'SkuEdition': 'category',
    'IsProtected': 'float16',
    'AutoSampleOptIn': 'int8',
    'PuaMode': 'category',
    'SMode': 'float16',
    'IeVerIdentifier': 'float16',
    'SmartScreen': 'category',
    'Firewall': 'float16',
    'UacLuaenable': 'float32',
    'Census_MDC2FormFactor': 'category',
    'Census_DeviceFamily': 'category',
    'Census_OEMNameIdentifier': 'float16',
    'Census_OEMModelIdentifier': 'float32',
    'Census_ProcessorCoreCount': 'float16',
    'Census_ProcessorManufacturerIdentifier': 'float16',
    'Census_ProcessorModelIdentifier': 'float16',
    'Census_ProcessorClass': 'category',
    'Census_PrimaryDiskTotalCapacity': 'float32',
    'Census_PrimaryDiskTypeName': 'category',
    'Census_SystemVolumeTotalCapacity': 'float32',
    'Census_HasOpticalDiskDrive': 'int8',
    'Census_TotalPhysicalRAM': 'float32',
    'Census_ChassisTypeName': 'category',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches': 'float16',
    'Census_InternalPrimaryDisplayResolutionHorizontal': 'float16',
    'Census_InternalPrimaryDisplayResolutionVertical': 'float16',
    'Census_PowerPlatformRoleName': 'category',
    'Census_InternalBatteryType': 'category',
    'Census_InternalBatteryNumberOfCharges': 'float32',
    'Census_OSVersion': 'category',
    'Census_OSArchitecture': 'category',
    'Census_OSBranch': 'category',
    'Census_OSBuildNumber': 'int16',
    'Census_OSBuildRevision': 'int32',
    'Census_OSEdition': 'category',
    'Census_OSSkuName': 'category',
    'Census_OSInstallTypeName': 'category',
    'Census_OSInstallLanguageIdentifier': 'float16',
    'Census_OSUILocaleIdentifier': 'int16',
    'Census_OSWUAutoUpdateOptionsName': 'category',
    'Census_IsPortableOperatingSystem': 'int8',
    'Census_GenuineStateName': 'category',
    'Census_ActivationChannel': 'category',
    'Census_IsFlightingInternal': 'float16',
    'Census_IsFlightsDisabled': 'float16',
    'Census_FlightRing': 'category',
    'Census_ThresholdOptIn': 'float16',
    'Census_FirmwareManufacturerIdentifier': 'float16',
    'Census_FirmwareVersionIdentifier': 'float32',
    'Census_IsSecureBootEnabled': 'int8',
    'Census_IsWIMBootEnabled': 'float16',
    'Census_IsVirtualDevice': 'float16',
    'Census_IsTouchEnabled': 'int8',
    'Census_IsPenCapable': 'int8',
    'Census_IsAlwaysOnAlwaysConnectedCapable': 'float16',
    'Wdft_IsGamer': 'float16',
    'Wdft_RegionIdentifier': 'float16',
    'HasDetections': 'int8'
}

df = pd.read_csv("C:/pyfiles/MicrosoftMalwareDetection/files/train.csv", dtype=dtypes)

uniqueValuesInEachRow = []
for col in df.columns:
    uniqueValuesInEachRow.append(df[col].unique())
# stats
stats = []
withNoNan = 0
leastMissingCol = []

#checks if the feature has more than 2% MISSING values and saves those column names
for col in df.columns:
    stats.append((col, df[col].nunique(), df[col].isnull().sum() * 100 / df.shape[0],
                  df[col].value_counts(normalize=True, dropna=False).values[0] * 100, df[col].dtype))
    withNoNan = df[col].isnull().sum() * 100 / df.shape[0]
    if (withNoNan < 2):
        pass
    else:
        leastMissingCol.append(str(col))

# The stats_df dataframe gives idea about each feature and there properties
stats_df = pd.DataFrame(stats , columns=['Feature', 'Unique_values', 'Percentage of missing values',
                                        'Percentage of values in the biggest category', 'type'])
stats_df["UniqueAtrributes"] = uniqueValuesInEachRow
stats_df.sort_values('Percentage of missing values', ascending=False)
# stats_df.to_csv("C:/Users/aptr2/PycharmProjects/MicrosoftMalwareDetection/files/testAnalysis.csv")

#loads only features with specified columns
cols = list(pd.read_csv("C:/pyfiles/MicrosoftMalwareDetection/files/test.csv", nrows=1))
df = pd.read_csv("C:/pyfiles/MicrosoftMalwareDetection/files/test.csv", dtype=dtypes,
                 usecols=[i for i in cols if i not in leastMissingCol])
#df = pd.read_csv("C:/pyfiles/MicrosoftMalwareDetection/files/train.csv", dtype=dtypes)



print(len(df))
na_free = df.dropna()
print("Normal data ")
print(len(df))
print("data without nans")
print(len(na_free))
print(na_free.head())
only_na = df[~df.index.isin(na_free.index)]
print("data with nans")
print(len(only_na))
print(only_na.head())

dfFullNa = only_na['MachineIdentifier']
dfid = na_free['MachineIdentifier']
dfFullNa.to_csv('fullNaN.csv', index=False)
dfid.to_csv('noNaN.csv', index=False)


# Label encoding and imputing NaN values 
c = 0
lbl = LabelEncoder()
for col in na_free.columns:

    if (na_free[col].dtype.name == 'category'):
        print(c)
        c = c + 1
        na_free[col].cat.add_categories("NoValue").fillna("NoValue", inplace=True)

        lbl.fit(list(na_free[col].values))
        na_free[col] = lbl.transform(list(na_free[col].values))
    else:
        na_free[col].fillna(0, inplace=True)
        # df[col].fillna(df[col].mean(), inplae=True)

print(na_free.head())

print("--- %s seconds ---" % (time.time() - start_time))

# dfid.to_csv('my_csv.csv', mode='a', header=False)
# dfFullNa.to_csv('full_na.csv')
na_free.to_csv("testWithLessFeatures.csv", index= False)
print(na_free.shape)